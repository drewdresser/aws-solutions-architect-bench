{"id": 0, "input": "Write an AWS CDK **Python** app that creates a private VPC with two isolated subnets and an S3 Gateway Endpoint. Use AWS CDK v2 (aws-cdk-lib) when you write code. Emit a complete CDK app that can be synthesized.", "target": null, "metadata": {"skill": "networking"}}
{"id": 1, "input": "Using CDK (Python), define a Lambda@Edge function that adds a security header and attach it to a CloudFront distribution. Use AWS CDK v2 (aws-cdk-lib) when you write code. Emit a complete CDK app that can be synthesized.", "target": null, "metadata": {"skill": "edge"}}
{"id": 2, "input": "Write an AWS CDK **Python** app that builds a public–private VPC with NAT Gateways in two AZs and publishes the VPC ID as an SSM Parameter. Use AWS CDK v2 (aws-cdk-lib). Emit a complete CDK app that can be synthesized.", "target": null, "metadata": {"skill": "networking"}}
{"id": 3, "input": "Create a CDK (Python) stack that provisions an encrypted Amazon S3 bucket with bucket-level access logging and an AWS Config rule ensuring all buckets are encrypted. Use AWS CDK v2. Emit a complete CDK app that can be synthesized.", "target": null, "metadata": {"skill": "security"}}
{"id": 4, "input": "Using CDK (Python), deploy an API Gateway HTTP API backed by two AWS Lambda functions behind a single stage. Include Canary deploy configuration via CodeDeploy. Use AWS CDK v2. Emit a complete CDK app that can be synthesized.", "target": null, "metadata": {"skill": "serverless"}}
{"id": 5, "input": "Write a CDK (Python) app that sets up an Amazon Aurora PostgreSQL cluster spanning three AZs with automatic backups and a Data API endpoint. Use AWS CDK v2. Emit a complete CDK app that can be synthesized.", "target": null, "metadata": {"skill": "database"}}
{"id": 6, "input": "Define an Amazon ECS Fargate service (Python CDK) running behind an Application Load Balancer with auto-scaling based on CPU utilisation. Use AWS CDK v2. Emit a complete CDK app that can be synthesized.", "target": null, "metadata": {"skill": "containers"}}
{"id": 7, "input": "Using CDK (Python), create an AWS Organizations multi-account setup with a Dev and Prod account, a shared networking account hosting a centralized Transit Gateway, and SCPs that deny public S3 access. Use AWS CDK v2. Emit a complete CDK app that can be synthesized.", "target": null, "metadata": {"skill": "multi-account"}}
{"id": 8, "input": "Write a CDK (Python) stack that enables AWS CloudTrail, stores logs in an encrypted S3 bucket, and streams them to CloudWatch Logs with metric filters for root-account usage. Use AWS CDK v2. Emit a complete CDK app that can be synthesized.", "target": null, "metadata": {"skill": "observability"}}
{"id": 9, "input": "Create a CDK (Python) construct that attaches AWS Budgets to a specific account, sending email and SNS alerts at 80% and 100% of a monthly cost threshold. Use AWS CDK v2. Emit a complete CDK app that can be synthesized.", "target": null, "metadata": {"skill": "cost-optimization"}}
{"id": 10, "input": "Using CDK (Python), build a CloudFront distribution with an Origin Access Control (OAC)–protected S3 origin, and attach a WAF v2 ACL blocking common exploits. Use AWS CDK v2. Emit a complete CDK app that can be synthesized.", "target": null, "metadata": {"skill": "edge"}}
{"id": 11, "input": "Write a CDK (Python) app that provisions an Amazon Cognito user pool with an app client supporting OAuth2 implicit flow, plus a Lambda trigger that enforces custom password policy. Use AWS CDK v2. Emit a complete CDK app that can be synthesized.", "target": null, "metadata": {"skill": "identity"}}
{"id": 12, "input": "Define a CDK (Python) pipeline using CodePipeline that pulls from GitHub, synthesizes with CDK v2, runs unit tests, and deploys to two stages (Test and Prod) with manual approval between them. Emit a complete CDK app that can be synthesized.", "target": null, "metadata": {"skill": "ci/cd"}}
{"id": 13, "input": "With CDK (Python), create a SageMaker training pipeline that pulls data from an encrypted S3 bucket, launches an ML training job on a GPU instance, and stores model artifacts in S3. Use AWS CDK v2. Emit a complete CDK app that can be synthesized.", "target": null, "metadata": {"skill": "ml"}}
{"id": 14, "input": "Using CDK (Python), build an event-driven architecture where an SQS queue triggers a Lambda function that writes records to DynamoDB with on-demand capacity and point-in-time recovery. Use AWS CDK v2. Emit a complete CDK app that can be synthesized.", "target": null, "metadata": {"skill": "event-driven"}}
{"id": 15, "input": "Create a CDK (Python) stack that deploys an Amazon RDS MySQL Multi-AZ instance with read replica and enforces IAM database authentication. Use AWS CDK v2. Emit a complete CDK app that can be synthesized.", "target": null, "metadata": {"skill": "high-availability"}}
{"id": 16, "input": "Write a CDK (Python) app that builds a basic data lake: an S3 raw zone with object-level encryption, AWS Glue Data Catalog crawler, and an Athena workgroup configured for encrypted query results. Use AWS CDK v2. Emit a complete CDK app that can be synthesized.", "target": null, "metadata": {"skill": "analytics"}}
{"id": 17, "input": "Define a CDK (Python) construct that sets up DynamoDB Global Tables across us-east-1 and eu-west-1 with on-demand backup enabled. Use AWS CDK v2. Emit a complete CDK app that can be synthesized.", "target": null, "metadata": {"skill": "global-data"}}
{"id": 18, "input": "Using CDK (Python), provision an Amazon EKS cluster with Fargate profiles for dev and prod namespaces, cluster logging to CloudWatch, and an ALB Ingress Controller. Use AWS CDK v2. Emit a complete CDK app that can be synthesized.", "target": null, "metadata": {"skill": "kubernetes"}}
{"id": 19, "input": "Create a CDK (Python) stack that orchestrates a Step Functions state machine executing three Lambda micro-services (validate, process, notify) with error handling and retries. Use AWS CDK v2. Emit a complete CDK app that can be synthesized.", "target": null, "metadata": {"skill": "orchestration"}}
